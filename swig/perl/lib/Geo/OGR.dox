## @ignore Geo::OGRc

## @class Geo::OGR

## @ignore TIEHASH
## @ignore CLEAR
## @ignore FIRSTKEY
## @ignore NEXTKEY
## @ignore FETCH
## @ignore STORE
## @ignore this

## @fn UseExceptions()

## @fn DontUseExceptions()

## @fn @GeometryTypes()
# @return a list of all geometry types

## @fn $CreateGeometryFromWkb($WKB, $srs = undef)
# @param WKB buffer containing well known binary
# @param srs a Geo::OSR::SpatialReference object
# @return a new Geo::OGR::Geometry object

## @fn $CreateGeometryFromWkt($WKT, $srs = undef)
# @param WKT string containing well known text
# @param srs a Geo::OSR::SpatialReference object
# @return a new Geo::OGR::Geometry object

## @fn $CreateGeometryFromGML($GML)
# @param GML string containing GML
# @return a new Geo::OGR::Geometry object

## @fn $GetDriverCount()
# @return count

## @fn $GetOpenDSCount()
# @return count

## @fn SetGenerate_DB2_V72_BYTE_ORDER($Generate_DB2_V72_BYTE_ORDER)
# Needed only on IBM DB2.

## @fn RegisterAll()
# Called in initialization.

## @fn $GetOpenDS($number)
# @param number the data source number
# @return a new Geo::OGR::DataSource object

## @fn $Open($name, $update = 0)
# @deprecated [use Geo::OGR::DataSource::Open]
# @param name the data source name (directory, filename, etc.)
# @param update if set to true, the data source can be updated
# @return a new Geo::OGR::DataSource object

## @fn $OpenShared($name, $update = 0)
# @deprecated [use Geo::OGR::DataSource::OpenShared]
# @param name the data source name (directory, filename, etc.)
# @param update if set to true, the data source can be updated
# @return a new Geo::OGR::DataSource object

## @fn $GetDriverByName($name)
# @deprecated

## @fn $GetDriver($driver)
# @param driver the index or the name of the driver
# @return a new Geo::OGR::Driver object

## @attr wkb25Bit
# @deprecated

## @attr wkbUnknown
# @deprecated

## @attr wkbPoint
# @deprecated

## @attr wkbLineString
# @deprecated

## @attr wkbPolygon
# @deprecated

## @attr wkbMultiPoint
# @deprecated

## @attr wkbMultiLineString
# @deprecated

## @attr wkbMultiPolygon
# @deprecated

## @attr wkbGeometryCollection
# @deprecated

## @attr wkbNone
# @deprecated

## @attr wkbLinearRing
# @deprecated

## @attr wkbPoint25D
# @deprecated

## @attr wkbLineString25D
# @deprecated

## @attr wkbPolygon25D
# @deprecated

## @attr wkbMultiPoint25D
# @deprecated

## @attr wkbMultiLineString25D
# @deprecated

## @attr wkbMultiPolygon25D
# @deprecated

## @attr wkbGeometryCollection25D
# @deprecated

## @attr OFTInteger
# @deprecated

## @attr OFTIntegerList
# @deprecated

## @attr OFTReal
# @deprecated

## @attr OFTRealList
# @deprecated

## @attr OFTString
# @deprecated

## @attr OFTStringList
# @deprecated

## @attr OFTWideString
# @deprecated

## @attr OFTWideStringList
# @deprecated

## @attr OFTBinary
# @deprecated

## @attr OFTDate
# @deprecated

## @attr OFTTime
# @deprecated

## @attr OFTDateTime
# @deprecated

## @attr OJUndefined
# @deprecated

## @attr OJLeft
# @deprecated

## @attr OJRight
# @deprecated

## @attr wkbXDR
# @deprecated

## @attr wkbNDR
# @deprecated

## @attr OLCRandomRead
# @deprecated

## @attr OLCSequentialWrite
# @deprecated

## @attr OLCRandomWrite
# @deprecated

## @attr OLCFastSpatialFilter
# @deprecated

## @attr OLCFastFeatureCount
# @deprecated

## @attr OLCFastGetExtent
# @deprecated

## @attr OLCCreateField
# @deprecated

## @attr OLCTransactions
# @deprecated

## @attr OLCDeleteFeature
# @deprecated

## @attr OLCFastSetNextByIndex
# @deprecated

## @attr ODsCCreateLayer
# @deprecated

## @attr ODsCDeleteLayer
# @deprecated

## @attr ODrCCreateDataSource
# @deprecated

## @attr ODrCDeleteDataSource
# @deprecated

## @class Geo::OGR::Driver
# @isa (Geo::OGR)

## @ignore DISOWN
## @ignore ACQUIRE

## @cmethod @Capabilities()
# @return the class method returns a list of all potential
# capabilities a driver may have; the object method returns a list of
# all capabilities the driver has

## @attr name
# scalar (access as $driver->{name})

## @method $CreateDataSource($name, \@options = undef )
# @param name the data source name
# @param options a list of driver specific options
# @return a new Geo::OGR::Datasource object

## @method $CopyDataSource($ds, $name, \@options = undef)
# @param ds the Geo::OGR::Datasource object to be copied
# @param name
# @param options
# @return a new Geo::OGR::Datasource object

## @method $Open($name, $update = 0)
# @param name
# @param update
# @return a new Geo::OGR::Datasource object

## @method DeleteDataSource($name)
# @param name
# @return integer

## @method $TestCapability($cap)
# @param cap a capability string
# @return boolean

## @method $GetName()
# @return the name


## @class Geo::OGR::DataSource
# @isa (Geo::OGR)

## @ignore DISOWN
## @ignore ACQUIRE
## @ignore DESTROY

## @cmethod @Capabilities()
# @return the class method returns a list of all potential
# capabilities a data source may have; the object method returns a
# list of all capabilities the data source has

## @cmethod $Open($name, $update = 0)
# @param name the data source name (directory, filename, etc.)
# @param update if set to true, the data source can be updated
# @return a new Geo::OGR::DataSource object

## @cmethod $OpenShared($name, $update = 0)
# @param name the data source name (directory, filename, etc.)
# @param update if set to true, the data source can be updated
# @return a new Geo::OGR::DataSource object

## @attr name
# string (access as $datasource->{name})

## @method $GetRefCount()
# @return integer

## @method $GetSummaryRefCount()
# @return integer

## @method $GetLayerCount()
# @return integer

## @method $GetDriver()
# @return a Geo::OGR::Driver object for this data source

## @method $GetName()
# @return string

## @method DeleteLayer($index)
# @param index

## @method $CreateLayer($name, $srs = undef, $geom_type = 'Unknown', \@options = undef)
# @param name
# @param srs a Geo::OSR::SpatialReference object
# @param geom_type one of geometry types (a string: Point, LineString, etc)
# @param options
# @return a new Geo::OGR::Layer object

## @method $CopyLayer($layer, $name, \@options = undef)
# @param layer a Geo::OGR::Layer object to be copied
# @param name a name for the new layer
# @param options
# @return a new Geo::OGR::Layer object

## @method $GetLayerByIndex($index = 0)
# @param index
# @return a new Geo::OGR::Layer object

## @method $GetLayerByName($name)
# @param name
# @return a new Geo::OGR::Layer object

## @method $TestCapability($cap)
# @param cap
# @return integer

## @method $ExecuteSQL($statement, $geom = undef, $dialect = "")
# @param statement
# @param geom a Geo::OGR::Geometry object
# @param dialect
# @return a new Geo::OGR::Layer object

## @method ReleaseResultSet($layer)
# @param layer a layer the has been created with ExecuteSQL

## @class Geo::OGR::Layer
# @isa (Geo::OGR)

## @ignore DISOWN
## @ignore ACQUIRE

## @cmethod @Capabilities()
# @return the class method returns a list of all potential
# capabilities a layer may have; the object method returns a list of
# all capabilities the layer has

## @method $GetRefCount()
# @return integer

## @method SetSpatialFilter($filter)
# @param filter a Geo::OGR::Geometry object

## @method SetSpatialFilterRect($minx, $miny, $maxx, $maxy)
# @param minx
# @param miny
# @param maxx
# @param maxy

## @method $GetSpatialFilter()
# @return a new Geo::OGR::Geometry object

## @method SetAttributeFilter($filter_string)
# @return scalar (OGRErr)

## @method ResetReading()

## @method $GetNextFeature()
# @return a new Geo::OGR::Feature object

## @method $GetFeaturesRead()
# @return integer

## @method $GetName()
# @return scalar (string)

## @method $GetFeature($fid)
# @param fid feature id
# @return a new Geo::OGR::Feature object

## @method SetNextByIndex($new_index)
# @param new_index the index to which set the read cursor

## @method SetFeature($feature)
# @param feature a Geo::OGR::Feature object

## @method CreateFeature($feature)
# @param feature a Geo::OGR::Feature object

## @method DeleteFeature($fid)
# @param fid feature id

## @method SyncToDisk()

## @method $GetLayerDefn()
# @return a new Geo::OGR::FeatureDefn object

## @method $GetFeatureCount($force = 1)
# @param force
# @return integer

## @method \@GetExtent($force = 1)
# @param force
# @return arrayref Extent = ($minx, $miny, $maxx, $maxy)

## @method $TestCapability($cap)
# @param cap
# @return boolean

## @method CreateField($field_def, $approx_ok = 1)
# @param field_def a Geo::OGR::FieldDefn object
# @param approx_ok

## @method StartTransaction()

## @method CommitTransaction()

## @method RollbackTransaction()

## @method $GetSpatialRef()
# @return a new Geo::OSR::SpatialReference object


## @class Geo::OGR::Feature
# @isa (Geo::OGR)

## @ignore DISOWN
## @ignore ACQUIRE
## @ignore DESTROY

## @cmethod $new($feature_def)
# @param feature_def a Geo::OGR::FeatureDefn object
# @return a new Geo::OGR::Feature object

## @method $GetDefnRef()
# @return a new Geo::OGR::FeatureDefn object

## @method SetGeometry($geom)
# @param geom a Geo::OGR::Geometry object

## @method SetGeometryDirectly($geom)
# @param geom a Geo::OGR::Geometry object

## @method $GetGeometryRef()
# @deprecated [use GetGeometry]
# @return a new Geo::OGR::Geometry object

## @method $GetGeometry()
# This is better than GetGeometryRef since this feature is not
# destroyed while the geometry exists.
# @return a new Geo::OGR::Geometry object

## @method $Clone()
# @return a new Geo::OGR::Feature object

## @method $Equal($feature)
# @param feature a Geo::OGR::Feature object for comparison
# @return boolean

## @method $GetFieldCount()
# @return integer

## @method $GetFieldDefnRef($param)
# @param param scalar (index or name of a field)
# @return a new Geo::OGR::FieldDefn object

## @method GetFieldAsString($field)
# @deprecated

## @method $GetFieldAsInteger($field)
# @deprecated

## @method $GetFieldAsDouble($field)
# @deprecated

## @method $GetField($field)
# @param field an index or a name of a field
# @return the value of the field

## @method $IsFieldSet($field)
# @param field an index or a name of a field
# @return boolean

## @method $GetFieldIndex($name)
# @param name field name
# @return integer the index of the field

## @method $GetFID()
# @return integer the feature id

## @method SetFID($fid)
# @param fid the feature id

## @method DumpReadable()

## @method UnsetField($field)
# @param field an index or a name of a field

## @method SetField($field, $value)
# @param field an index or a name of a field
# @param value

## @method SetFrom($other, $forgiving = 1)
# @param other a Geo::OGR::Feature object
# @param forgiving

## @method $GetStyleString()
# @return a string

## @method SetStyleString($string)
# @param string

## @method $GetFieldType($field)
# @param field an index or a name of a field
# @return one of field types


## @class Geo::OGR::FeatureDefn
# @isa (Geo::OGR)

## @ignore DISOWN
## @ignore ACQUIRE
## @ignore DESTROY

## @cmethod new($name = undef)
# @param name
# @return a Geo::OGR::FeatureDefn object

## @method $GetName()
# @return a string

## @method $GetFieldCount()
# @return an integer

## @method $GetFieldDefn($index)
# @param index
# @return a new Geo::OGR::FieldDefn object

## @method $GetFieldIndex($name)
# @param name
# @return integer (-1 if no such field)

## @method AddFieldDefn($defn)
# @param defn a Geo::OGR::FieldDefn object

## @method $GeomType($geom_type)
# @param geom_type one of geometry types
# @return one of geometry types unless geom_type is given

## @method $GetReferenceCount()
# @return integer

## @method $GetGeomType()
# @deprecated

## @method SetGeomType()
# @deprecated

## @class Geo::OGR::FieldDefn
# @isa (Geo::OGR)

## @ignore DISOWN
## @ignore ACQUIRE
## @ignore DESTROY

## @cmethod new($name = "unnamed", $field_type = $Geo::OGR::OFTString)
# @deprecated [use create]
# @param name
# @param field_type one of $Geo::OGR::OFT*
# @return a new Geo::OGR::FieldDefn object

## @cmethod $create($name = "unnamed", $field_type = 'String')
# @param name
# @param field_type one of field types
# @return a new Geo::OGR::FieldDefn object

## @method $Name($name)
# Get or set the name
# @param name

## @method $Type($type)
# @param type on of field types
# @return one of field types unles type is given

## @method $Justify($justify)
# Get or set the justification
# @param justify
# @return one of Undefined Left Right

## @method $Width($width)
# Get or set the field width
# @param width
# @return integer

## @method $Precision($precision)
# Get or set the precision
# @param precision
# @return integer

## @method $Geo::OGR::FieldDefn::GetFieldTypeName()
# @deprecated

## @method $Geo::OGR::FieldDefn::GetJustify()
# @deprecated

## @method $Geo::OGR::FieldDefn::GetName()
# @deprecated

## @method $Geo::OGR::FieldDefn::GetNameRef()
# @deprecated

## @method $Geo::OGR::FieldDefn::GetPrecision()
# @deprecated

## @method $Geo::OGR::FieldDefn::GetType()
# @deprecated

## @method $Geo::OGR::FieldDefn::GetWidth()
# @deprecated

## @method Geo::OGR::FieldDefn::SetJustify($justify)
# @param justify
# @deprecated

## @method Geo::OGR::FieldDefn::SetName($name)
# @param name
# @deprecated

## @method Geo::OGR::FieldDefn::SetPrecision($precision)
# @param precision
# @deprecated

## @method Geo::OGR::FieldDefn::SetType($type)
# @param type
# @deprecated

## @method Geo::OGR::FieldDefn::SetWidth($width)
# @param width
# @deprecated

## @class Geo::OGR::Geometry
# @isa (Geo::OGR)

## @ignore DISOWN
## @ignore ACQUIRE
## @ignore DESTROY

## @cmethod $new($type = $Geo::OGR::wkbUnknown, $WKT = undef, $WKB = undef, $GML = undef)
# @deprecated
# @param type one of Geo::OGR::wkb*
# @param WKT
# @param WKB
# @param GML
# @return a new Geo::OGR::Geometry object

## @cmethod $create($type)
# @param type One of geometry types ('Point', 'LineString', etc.).
# @return a new Geo::OGR::Geometry object

## @cmethod $create(%params)
# @param %params Named parameter, possible are: type, WKT, WKB, and GML.
# @return a new Geo::OGR::Geometry object

## @method $ExportToWkt()
# @return a WKT string

## @method $ExportToWkb($byte_order = 'XDR')
# @param byte_order XDR or NDR
# @return a WKB binary string

## @method $ExportToGML()
# @return a GML string

## @method $ExportToKML()
# @return KML string

## @method AddPoint($x, $y, $z = 0)
# @param x
# @param y
# @param z
# Calls internally the 2D or 3D version depending on the number of parameters.

## @method AddPoint_2D($x, $y)
# @param x
# @param y
# @deprecated 

## @method AddPoint_3D($x, $y, $z)
# @param x
# @param y
# @param z
# @deprecated 

## @method $IsEmpty()
# @return boolean

## @method $IsRing()
# @return boolean

## @method $IsSimple()
# @return boolean

## @method $IsValid()
# @return boolean

## @method Move($dx, $dy, $dz = 0)
# @param dx
# @param dy
# @param dz

## @method AddGeometryDirectly($other)
# @param other a Geo::OGR::Geometry object

## @method AddGeometry($other)
# @param other a Geo::OGR::Geometry object

## @method $Clone()
# @return a new Geo::OGR::Geometry object

## @method $GetGeometryType()
# @deprecated 

## @method $GeometryType()
# @return the geometry type

## @method $GetGeometryName()
# @deprecated
# @return a string

## @method $GetArea()
# @return a number

## @method $GetPointCount()
# @return an integer

## @method $GetX($index = 0)
# @param index
# @return a number

## @method $GetY($index = 0)
# @param index
# @return a number

## @method $GetZ($index = 0)
# @param index
# @return a number

## @method $GetGeometryCount()
# @return an integer

## @method SetPoint($index, $x, $y, $z = 0)
# @param index
# @param x
# @param y
# @param z

## @method $GetGeometryRef($index)
# @param index
# @return a new Geo::OGR::Geometry object whose data is a part of the
# parent geometry

## @method $GetBoundary()
# @return a new Geo::OGR::Geometry object

## @method $ConvexHull()
# @return a new Geo::OGR::Geometry object

## @method $Buffer($distance, $quadsecs = 30)
# @param distance
# @param quadsecs
# @return a new Geo::OGR::Geometry object

## @method $Intersection($other)
# @param other a Geo::OGR::Geometry object
# @return a new Geo::OGR::Geometry object

## @method $Union($other)
# @param other a Geo::OGR::Geometry object
# @return a new Geo::OGR::Geometry object

## @method $Difference($other)
# @param other a Geo::OGR::Geometry object
# @return a new Geo::OGR::Geometry object

## @method $SymmetricDifference($other)
# @param other a Geo::OGR::Geometry object
# @return a new Geo::OGR::Geometry object

## @method $Distance($other)
# @param other a Geo::OGR::Geometry object
# @return a new Geo::OGR::Geometry object

## @method Empty()
# Clear geometry data.

## @method $Intersect($other)
# @param other a Geo::OGR::Geometry object
# @return boolean

## @method $Equal($other)
# @param other a Geo::OGR::Geometry object
# @return boolean

## @method $Disjoint($other)
# @param other a Geo::OGR::Geometry object
# @return boolean

## @method $Touches($other)
# @param other a Geo::OGR::Geometry object
# @return boolean

## @method $Crosses($other)
# @param other a Geo::OGR::Geometry object
# @return boolean

## @method $Within($other)
# @param other a Geo::OGR::Geometry object
# @return boolean

## @method $Contains($other)
# @param other a Geo::OGR::Geometry object
# @return boolean

## @method $Overlaps($other)
# @param other a Geo::OGR::Geometry object
# @return boolean

## @method TransformTo($srs)
# @param srs a Geo::OSR::SpatialReference object

## @method Transform($trans)
# @param trans a Geo::OSR::CoordinateTransformation object

## @method $GetSpatialReference()
# @return a new Geo::OSR::SpatialReference object

## @method AssignSpatialReference($srs)
# @param srs a Geo::OSR::SpatialReference object

## @method CloseRings()

## @method FlattenTo2D()

## @method \@GetEnvelope()
# @return arrayref = [$minx, $maxx, $miny, $maxy]

## @method $Centroid()
# @return a new Geo::OGR::Geometry object

## @method $WkbSize()
# @return an integer

## @method $GetCoordinateDimension()
# @return an integer

## @method SetCoordinateDimension($dimension)
# @param dimension

## @method $GetDimension()
# @return an integer
