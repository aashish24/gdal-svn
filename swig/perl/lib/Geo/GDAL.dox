## @ignore Geo::GDALc

## @class Geo::GDAL

## @ignore TIEHASH
## @ignore CLEAR
## @ignore FIRSTKEY
## @ignore NEXTKEY
## @ignore FETCH
## @ignore STORE
## @ignore this
## @ignore GDAL_GCP_GCPX_get
## @ignore GDAL_GCP_GCPX_set
## @ignore GDAL_GCP_GCPY_get
## @ignore GDAL_GCP_GCPY_set
## @ignore GDAL_GCP_GCPZ_get
## @ignore GDAL_GCP_GCPZ_set
## @ignore GDAL_GCP_GCPPixel_get
## @ignore GDAL_GCP_GCPPixel_set
## @ignore GDAL_GCP_GCPLine_get
## @ignore GDAL_GCP_GCPLine_set
## @ignore GDAL_GCP_Info_get
## @ignore GDAL_GCP_Info_set
## @ignore GDAL_GCP_Id_get
## @ignore GDAL_GCP_Id_set
## @ignore GDAL_GCP_get_GCPX
## @ignore GDAL_GCP_set_GCPX
## @ignore GDAL_GCP_get_GCPY
## @ignore GDAL_GCP_set_GCPY
## @ignore GDAL_GCP_get_GCPZ
## @ignore GDAL_GCP_set_GCPZ
## @ignore GDAL_GCP_get_GCPPixel
## @ignore GDAL_GCP_set_GCPPixel
## @ignore GDAL_GCP_get_GCPLine
## @ignore GDAL_GCP_set_GCPLine
## @ignore GDAL_GCP_get_Info
## @ignore GDAL_GCP_set_Info
## @ignore GDAL_GCP_get_Id
## @ignore GDAL_GCP_set_Id

## @fn \@ReadDir($path)
# @param path
# @return the files in the directory that path defines

## @fn UseExceptions()

## @fn DontUseExceptions()

## @fn Debug($msg_class, $msg)
# @param msg_class
# @param msg

## @fn Error()

## @fn PushErrorHandler()

## @fn PopErrorHandler()

## @fn ErrorReset()

## @fn GetLastErrorNo()

## @fn GetLastErrorType()

## @fn GetLastErrorMsg()

## @fn PushFinderLocation()

## @fn PopFinderLocation()

## @fn FinderClean()

## @fn FindFile()

## @fn SetConfigOption()

## @fn GetConfigOption()

## @fn CPLBinaryToHex()

## @fn CPLHexToBinary()

## @fn $VersionInfo($request = 'VERSION_NUM')
# @param request
# @return Descriptive string or version number

## @fn \@GCPsToGeoTransform(\@GCPs, $ApproxOK = 1)
# x = $a + j * $b + i * $c;<br/>
# y = $d + j * $e + i * $f;<br/>
# (i,j) is the location in pixel coordinates<br/>
# (x,y) is the location in projection coordinates<br/>
# @return [$a, $b, $c, $d, $e, $f]

## @fn AllRegister()

## @fn $GetCacheMax()
# @return

## @fn SetCacheMax($Bytes)
# @param Bytes

## @fn $GetCacheUsed()
# @return

## @fn $GetDataTypeSize($GDALDataType)
# @param GDALDataType (one of Byte, UInt16, Int16, UInt32, Int32, Float32,
# Float64, CInt16, CInt32, CFloat32, or CFloat64)
# @return

## @fn $DataTypeIsComplex($GDALDataType)
# @param GDALDataType
# @return

## @fn $DecToDMS($angle, $axis, $precision=2)
# @param angle
# @param axis
# @param precision
# @return

## @fn $PackedDMSToDec($packed)
# @param packed
# @return

## @fn $DecToPackedDMS($dec)
# @param dec
# @return number

## @fn $NodeType($type)
# Convert between integer and string expressions of CPLXMLNodeTypes
# @param type
# @return type

## @fn \@ParseXMLString($XML)
# Parses a given XML into an array of arrays and returns a reference
# to that. An array in the structure is: (CPLXMLNodeType, value,
# child, child, ...). CPLXMLNodeType is an integer.
# @param XML
# @return an XMLTree

## @fn $SerializeXMLTree(\@XMLTree)
# @param XMLTree
# @return XML

## @fn $GetDriverCount()
# @return

## @fn $GetDriver($driver)
# @param driver The name or number of the driver.
# @return a new Geo::GDAL::Driver object

## @fn $IdentifyDriver($datasource_name, $siblings = undef)
# @param datasource_name
# @param siblings
# @return a new Geo::GDAL::Driver object

## @fn ReprojectImage($src_ds, $dst_ds, $src_wkt=undef, $dst_wkt=undef, $ResampleAlg='NearestNeighbour', $WarpMemoryLimit=0.0, $maxerror=0.0)
# @param src_ds
# @param dst_ds
# @param src_wkt
# @param dst_wkt
# @param ResampleAlg one of NearestNeighbour Bilinear Cubic CubicSpline
# @param WarpMemoryLimit
# @param maxerror

## @fn AutoCreateWarpedVRT($src_ds, $src_wkt=undef, $dst_wkt=undef, $ResampleAlg='NearestNeighbour', $maxerror=0.0)
# @param src_ds a Geo::GDAL::Dataset object
# @param src_wkt
# @param dst_wkt
# @param ResampleAlg one of NearestNeighbour Bilinear Cubic CubicSpline
# @param maxerror
# @return a new Geo::GDAL::Dataset object

## @fn \@GeneralCmdLineProcessor(\@argv, $options = 0)
# @param argv
# @param options integer
# @return arrayref

## @fn $PackCharacter($DataType)
# Get the character that is needed for Perl's pack and unpack when
# they are used with Geo::GDAL::Band::ReadRaster and
# Geo::GDAL::Band::WriteRaster. Note that Geo::GDAL::Band::ReadTile
# and Geo::GDAL::Band::WriteTile have simpler interfaces that do not
# require pack and unpack.
# @param DataType GDAL data type value, typically from $band->{DataType}
# @return character which can be used in Perl's pack and unpack

## @fn $Open($datasource_name, $access='ReadOnly')
# @param datasource_name 
# @param access
# @return a new Geo::GDAL::Dataset object

## @fn $OpenShared($name, $access='ReadOnly')
# @param name
# @param access either ReadOnly or Update
# @return a new Geo::GDAL::Dataset object

## @fn $GetDataTypeName($GDALDataType)
# @deprecated use string names
# @param GDALDataType
# @return

## @fn $GetDataTypeByName($GDALDataType)
# @deprecated use string names
# @param GDALDataType
# @return

## @fn $GetColorInterpretationName($ColorInterpretation)
# @deprecated use string names
# @param ColorInterpretation
# @return

## @fn $GetPaletteInterpretationName($PaletteInterpretation)
# @deprecated use string names
# @param PaletteInterpretation
# @return

## @fn $GetDriverByName($ShortName)
# @param ShortName
# @return a new Geo::GDAL::Driver object


## @class Geo::GDAL::MajorObject
# @isa (Geo::GDAL)

## @ignore DISOWN
## @ignore ACQUIRE

## @method $Description($description)
# @param description [optional]
# @return a description in non-void context

## @method $GetDescription()
# @return

## @method SetDescription($NewDesc)
# @param NewDesc

## @method \%Metadata(\%metadata, $domain = '')
# @param metadata [optional]
# @param domain
# @return metadata in non-void context

## @method \%GetMetadata($domain = "")
# @param domain
# @return

## @method SetMetadata(\%Metadata, $Domain = "")
# @param metadata
# @param domain


## @class Geo::GDAL::Driver
# @isa (Geo::GDAL::MajorObject Geo::GDAL)

## @ignore DISOWN
## @ignore ACQUIRE

## @method Register()

## @method Deregister()

## @method Rename()

## @attr ShortName
# $driver->{ShortName}

## @attr LongName
# $driver->{LongName}

## @attr HelpTopic
# $driver->{HelpTopic}

## @method $Create($name, $xsize, $ysize, $bands =1, $type = 'Byte', \@options = undef)
# @brief Create a new Geo::GDAL::Dataset
# @param name
# @param xsize
# @param ysize
# @param bands
# @param type
# @param options
# @return a new Geo::GDAL::Dataset object

## @method $CreateCopy($name, $src, $strict = 1, \@options = undef)
# @brief Create a new Geo::GDAL::Dataset
# @param name
# @param src a Geo::GDAL::Dataset object
# @param strict
# @param options
# @return a new Geo::GDAL::Dataset object 

## @method Delete($name)
# @param name


## @class Geo::GDAL::GCP
# @isa (Geo::GDAL)

## @ignore DISOWN
## @ignore ACQUIRE
## @ignore DESTROY

## @cmethod $new($x = 0.0, $y = 0.0, $z = 0.0, $pixel = 0.0, $line = 0.0, $info = "", $id = "")
# @param x
# @param y
# @param z
# @param pixel
# @param line
# @param info
# @param id
# @return a new Geo::GDAL::GCP object

## @attr GCPX
# scalar (access as $gcp->{GCPX})

## @attr GCPY
# scalar (access as $gcp->{GCPY})

## @attr GCPZ
# scalar (access as $gcp->{GCPZ})

## @attr GCPPixel
# scalar (access as $gcp->{GCPPixel})
# the pixel's j coordinate

## @attr GCPLine
# scalar (access as $gcp->{GCPLine})
# the pixel's i coordinate

## @attr Info
# scalar (access as $gcp->{Info})

## @attr Id
# scalar (access as $gcp->{Id})


## @class Geo::GDAL::Dataset
# @isa (Geo::GDAL::MajorObject Geo::GDAL)

## @ignore DISOWN
## @ignore ACQUIRE
## @ignore DESTROY

## @cmethod $Open($datasource_name, $access='ReadOnly')
# @param datasource_name 
# @param access
# @return a new Geo::GDAL::Dataset object

## @cmethod $OpenShared($name, $access='ReadOnly')
# @param name
# @param access either ReadOnly or Update
# @return a new Geo::GDAL::Dataset object

## @method @Size()
# @return (width, height)

## @attr RasterXSize
# scalar (access as $dataset->{RasterXSize})

## @attr RasterYSize
# scalar (access as $dataset->{RasterYSize})

## @attr RasterCount
# scalar (access as $dataset->{RasterCount})

## @method $GetDriver()
# @return a new Geo::GDAL::Driver object

## @method $GetRasterBand($index)
# @param index 1...RasterCount
# @return a new Geo::GDAL::Band object

## @method $Projection($projection)
# Get or set the projection.
# @param projection
# @return the projection

## @method $GetProjection()
# @return the projection

## @method $GetProjectionRef()
# @return a string

## @method $SetProjection($proj)
# @param proj a string

## @method @GeoTransform(@geo_transform)
# @param geo_transform

## @method \@GetGeoTransform()
# @return a reference to an array of six parameters 

## @method SetGeoTransform(\@GeoTransform)
# @param GeoTransform

## @method BuildOverviews($resampling = "NEAREST", \@overviews = undef)
# @param resampling
# @param overviews

## @method @GCPs(@GCPs, $GCPProjection)
# Get or set the GCPs and their projection.
# @param GCPs a list of Geo::GDAL::GCP objects
# @param GCPProjection
# @return a list of Geo::GDAL::GCP objects followed by a GCPProjection

## @method $GetGCPCount()
# @return the number of GCPs

## @method $GetGCPProjection()
# @return

## @method \@GetGCPs()
# @return

## @method SetGCPs(\@GCPs, $GCPProjection)
# @param GCPs
# @param GCPProjection

## @method FlushCache()

## @method AddBand($datatype = 'Byte', \@options = 0)
# @param datatype
# @param options

## @method WriteRaster($xoff, $yoff, $xsize, $ysize, $buf, $buf_xsize = undef, $buf_ysize = undef, $buf_type = undef, \@band_list = undef)
# Write a buffer into the raster. Create the buffer with pack.
# <a href="http://www.gdal.org/classGDALDataset.html">Entry in GDAL docs</a>
# @param xoff
# @param yoff
# @param xsize
# @param ysize
# @param buf
# @param buf_xsize
# @param buf_ysize
# @param buf_type
# @param band_list

## @method $ReadRaster($xoff, $yoff, $xsize, $ysize, $buf_xsize = undef, $buf_ysize = undef, $buf_type = undef, \@band_list = undef)
# Read a buffer from the raster.
# @param xoff
# @param yoff
# @param xsize
# @param ysize
# @param buf_xsize
# @param buf_ysize
# @param buf_type
# @param band_list
# @return a buffer, open the buffer with unpack.

## @method CreateMaskBand()


## @class Geo::GDAL::Band
# @isa ( Geo::GDAL::MajorObject Geo::GDAL )

## @ignore DISOWN
## @ignore ACQUIRE

## @attr XSize
# scalar (access as $band->{XSize})

## @attr YSize
# scalar (access as $band->{YSize})

## @attr DataType
# @deprecated use the Geo::GDAL::Band::DataType method, which returns
# a string.

## @method @Size()
# @return (width, height)

## @method @GetBlockSize()
# @return ($BlockXSize, $BlockYSize)

## @method ColorInterpretation($color_interpretation)
# @param color_interpretation [optional] new color interpretation
# @return color interpretation

## @method $NoDataValue(NoDataValue)
# Get or set the no data value.

## @method $GetNoDataValue()
# @return number or undef

## @method SetNoDataValue($NoDataValue)
# @param NoDataValue (undef is zero, i.e., once set NoDataValue can't be removed)

## @method $GetMinimum()
# @return number or undef

## @method $GetMaximum()
# @return number or undef

## @method $GetOffset()
# @return number or undef

## @method $GetScale()
# @return number or undef

## @method @GetStatistics($approx_ok, $force)
# @param approx_ok
# @param force
# @return array Statistics = ($min, $max, $mean, $stddev)

## @method SetStatistics($min, $max, $mean, $stddev)
# @param min
# @param max
# @param mean
# @param stddev

## @method $GetOverviewCount()
# @return integer

## @method $GetOverview($i)
# @param i 0..GetOverviewCount-1
# @return a new Geo::GDAL::RasterBand object

## @method $Checksum($xoff = 0, $yoff = 0, $xsize = undef, $ysize = undef)
# @param xoff
# @param yoff
# @param xsize
# @param ysize
# @return integer

## @method ComputeRasterMinMax($approx_ok = 0)
# @return arrayref MinMax = [$min, $max]

## @method ComputeBandStats($samplestep = 1)
# @return arrayref Stats

## @method Fill($real_fill, $imag_fill = 0.0)

## @method WriteTile($data, $xoff, $yoff)
# @param data a two-dimensional Perl array
# @param xoff [optional]
# @param yoff [optional]

## @method \@ReadTile($xoff, $yoff, $xsize, $ysize)
# @param xoff [optional]
# @param yoff [optional]
# @param xsize [optional]
# @param ysize [optional]
# @return a two-dimensional Perl array

## @method WriteRaster($xoff, $yoff, $xsize, $ysize, $buf, $buf_xsize = undef, $buf_ysize = undef, $buf_type = undef)

## @method $ReadRaster($xoff, $yoff, $xsize, $ysize, $buf_xsize = undef, $buf_ysize = undef, $buf_type = undef)
# @return $buf

## @method FlushCache()

## @method $ColorTable($ColorTable)
# Get or set the color table of this band.
# @param ColorTable [optional] a Geo::GDAL::ColorTable object
# @return a new Geo::GDAL::ColorTable object if in non-void context

## @method $GetRasterColorTable()
# @return

## @method SetRasterColorTable($ColorTable)
# @param ColorTable

## @method CreateMaskBand()

## @method $GetMaskBand()

## @method $GetMaskFlags()

## @method GetRasterCategoryNames()

## @method SetRasterCategoryNames()

## @method GetDefaultRAT()

## @method SetDefaultRAT()

## @method $GetRasterColorInterpretation()
# @deprecated use Geo::GDAL::Band::ColorInterpretation, which understands strings

## @method SetRasterColorInterpretation()
# @deprecated use Geo::GDAL::Band::ColorInterpretation, which understands strings


## @class Geo::GDAL::ColorTable
# @isa ( Geo::GDAL::MajorObject Geo::GDAL )

## @ignore DISOWN
## @ignore ACQUIRE
## @ignore DESTROY

## @cmethod $new($GDALPaletteInterp = $Geo::GDAL::Const::GPI_RGB)
# @deprecated use Geo::GDAL::ColorTable::create, which uses string constants
# @return a new Geo::GDAL::ColorTable object

## @cmethod $create($GDALPaletteInterp = 'RGB')
# @return a new Geo::GDAL::ColorTable object

## @method $Clone()
# @return a new Geo::GDAL::ColorTable object

## @method $GetPaletteInterpretation()
# @return paletter interpretation (string)

## @method $GetCount()
# @return scalar (count of color entries as int)

## @method @ColorEntries(@color_entries)
# Get or set the color entries.
# @param color_entries [optional]
# @return a table of color entries (a list of lists) in a non void context

## @method @ColorEntry($i, @color)
# Get or set a color entry.
# @param i
# @color
# @return a color entry

## @method @GetColorEntry($i)
# @param i
# @return array ColorEntry = ($c1, $c2, $c3, $c4)

## @method @GetColorEntryAsRGB($i)
# @param i
# @return array ColorEntry = ($r, $g, $b, $alpha)

## @method SetColorEntry($index, @ColorEntry)
# @param index
# @param ColorEntry a list or a reference to an array

## @method CreateColorRamp($start_index, \@start_color, $end_index, \@end_color)
# @param start_index
# @param start_color
# @param end_index
# @param end_color


## @class Geo::GDAL::RasterAttributeTable
# @isa = ( Geo::GDAL::MajorObject Geo::GDAL )

## @ignore DISOWN
## @ignore ACQUIRE
## @ignore DESTROY

## @cmethod new()

## @method Clone()

## @method GetColumnCount()

## @method GetNameOfCol()

## @method GetUsageOfCol()

## @method GetTypeOfCol()

## @method GetColOfUsage()

## @method GetRowCount()

## @method GetValueAsString()

## @method GetValueAsInt()

## @method GetValueAsDouble()

## @method SetValueAsString()

## @method SetValueAsInt()

## @method SetValueAsDouble()

## @method SetRowCount()

## @method CreateColumn()

## @method GetRowOfValue()
